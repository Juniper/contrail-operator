package types

import (
	"reflect"

	"github.com/Juniper/contrail-go-api"
)

var (
	TypeMap = map[string]reflect.Type{
		"service-endpoint":                     reflect.TypeOf(ServiceEndpoint{}),
		"instance-ip":                          reflect.TypeOf(InstanceIp{}),
		"service-appliance-set":                reflect.TypeOf(ServiceApplianceSet{}),
		"route-target":                         reflect.TypeOf(RouteTarget{}),
		"loadbalancer-listener":                reflect.TypeOf(LoadbalancerListener{}),
		"floating-ip-pool":                     reflect.TypeOf(FloatingIpPool{}),
		"physical-router":                      reflect.TypeOf(PhysicalRouter{}),
		"config-root":                          reflect.TypeOf(ConfigRoot{}),
		"service-template":                     reflect.TypeOf(ServiceTemplate{}),
		"hardware-inventory":                   reflect.TypeOf(HardwareInventory{}),
		"firewall-policy":                      reflect.TypeOf(FirewallPolicy{}),
		"route-table":                          reflect.TypeOf(RouteTable{}),
		"provider-attachment":                  reflect.TypeOf(ProviderAttachment{}),
		"overlay-role":                         reflect.TypeOf(OverlayRole{}),
		"multicast-policy":                     reflect.TypeOf(MulticastPolicy{}),
		"network-device-config":                reflect.TypeOf(NetworkDeviceConfig{}),
		"virtual-DNS-record":                   reflect.TypeOf(VirtualDnsRecord{}),
		"control-node-zone":                    reflect.TypeOf(ControlNodeZone{}),
		"dsa-rule":                             reflect.TypeOf(DsaRule{}),
		"structured-syslog-config":             reflect.TypeOf(StructuredSyslogConfig{}),
		"discovery-service-assignment":         reflect.TypeOf(DiscoveryServiceAssignment{}),
		"logical-interface":                    reflect.TypeOf(LogicalInterface{}),
		"flow-node":                            reflect.TypeOf(FlowNode{}),
		"port-group":                           reflect.TypeOf(PortGroup{}),
		"route-aggregate":                      reflect.TypeOf(RouteAggregate{}),
		"logical-router":                       reflect.TypeOf(LogicalRouter{}),
		"domain":                               reflect.TypeOf(Domain{}),
		"structured-syslog-hostname-record":    reflect.TypeOf(StructuredSyslogHostnameRecord{}),
		"service-instance":                     reflect.TypeOf(ServiceInstance{}),
		"node-profile":                         reflect.TypeOf(NodeProfile{}),
		"bridge-domain":                        reflect.TypeOf(BridgeDomain{}),
		"alias-ip":                             reflect.TypeOf(AliasIp{}),
		"webui-node":                           reflect.TypeOf(WebuiNode{}),
		"port":                                 reflect.TypeOf(Port{}),
		"bgp-as-a-service":                     reflect.TypeOf(BgpAsAService{}),
		"subnet":                               reflect.TypeOf(Subnet{}),
		"global-system-config":                 reflect.TypeOf(GlobalSystemConfig{}),
		"sub-cluster":                          reflect.TypeOf(SubCluster{}),
		"forwarding-class":                     reflect.TypeOf(ForwardingClass{}),
		"service-group":                        reflect.TypeOf(ServiceGroup{}),
		"global-analytics-config":              reflect.TypeOf(GlobalAnalyticsConfig{}),
		"address-group":                        reflect.TypeOf(AddressGroup{}),
		"application-policy-set":               reflect.TypeOf(ApplicationPolicySet{}),
		"virtual-ip":                           reflect.TypeOf(VirtualIp{}),
		"intent-map":                           reflect.TypeOf(IntentMap{}),
		"port-tuple":                           reflect.TypeOf(PortTuple{}),
		"analytics-alarm-node":                 reflect.TypeOf(AnalyticsAlarmNode{}),
		"qos-queue":                            reflect.TypeOf(QosQueue{}),
		"physical-role":                        reflect.TypeOf(PhysicalRole{}),
		"card":                                 reflect.TypeOf(Card{}),
		"security-logging-object":              reflect.TypeOf(SecurityLoggingObject{}),
		"qos-config":                           reflect.TypeOf(QosConfig{}),
		"analytics-snmp-node":                  reflect.TypeOf(AnalyticsSnmpNode{}),
		"virtual-machine-interface":            reflect.TypeOf(VirtualMachineInterface{}),
		"cli-config":                           reflect.TypeOf(CliConfig{}),
		"service-object":                       reflect.TypeOf(ServiceObject{}),
		"feature-flag":                         reflect.TypeOf(FeatureFlag{}),
		"loadbalancer":                         reflect.TypeOf(Loadbalancer{}),
		"peering-policy":                       reflect.TypeOf(PeeringPolicy{}),
		"structured-syslog-application-record": reflect.TypeOf(StructuredSyslogApplicationRecord{}),
		"global-vrouter-config":                reflect.TypeOf(GlobalVrouterConfig{}),
		"floating-ip":                          reflect.TypeOf(FloatingIp{}),
		"link-aggregation-group":               reflect.TypeOf(LinkAggregationGroup{}),
		"virtual-router":                       reflect.TypeOf(VirtualRouter{}),
		"port-profile":                         reflect.TypeOf(PortProfile{}),
		"policy-management":                    reflect.TypeOf(PolicyManagement{}),
		"e2-service-provider":                  reflect.TypeOf(E2ServiceProvider{}),
		"fabric":                               reflect.TypeOf(Fabric{}),
		"job-template":                         reflect.TypeOf(JobTemplate{}),
		"routing-policy":                       reflect.TypeOf(RoutingPolicy{}),
		"role-config":                          reflect.TypeOf(RoleConfig{}),
		"tag-type":                             reflect.TypeOf(TagType{}),
		"structured-syslog-message":            reflect.TypeOf(StructuredSyslogMessage{}),
		"loadbalancer-pool":                    reflect.TypeOf(LoadbalancerPool{}),
		"device-chassis":                       reflect.TypeOf(DeviceChassis{}),
		"global-qos-config":                    reflect.TypeOf(GlobalQosConfig{}),
		"analytics-node":                       reflect.TypeOf(AnalyticsNode{}),
		"virtual-DNS":                          reflect.TypeOf(VirtualDns{}),
		"config-database-node":                 reflect.TypeOf(ConfigDatabaseNode{}),
		"config-node":                          reflect.TypeOf(ConfigNode{}),
		"device-functional-group":              reflect.TypeOf(DeviceFunctionalGroup{}),
		"firewall-rule":                        reflect.TypeOf(FirewallRule{}),
		"bgpvpn":                               reflect.TypeOf(Bgpvpn{}),
		"role-definition":                      reflect.TypeOf(RoleDefinition{}),
		"service-connection-module":            reflect.TypeOf(ServiceConnectionModule{}),
		"security-group":                       reflect.TypeOf(SecurityGroup{}),
		"database-node":                        reflect.TypeOf(DatabaseNode{}),
		"loadbalancer-healthmonitor":           reflect.TypeOf(LoadbalancerHealthmonitor{}),
		"devicemgr-node":                       reflect.TypeOf(DevicemgrNode{}),
		"project":                              reflect.TypeOf(Project{}),
		"fabric-namespace":                     reflect.TypeOf(FabricNamespace{}),
		"network-ipam":                         reflect.TypeOf(NetworkIpam{}),
		"network-policy":                       reflect.TypeOf(NetworkPolicy{}),
		"sflow-profile":                        reflect.TypeOf(SflowProfile{}),
		"hardware":                             reflect.TypeOf(Hardware{}),
		"tag":                                  reflect.TypeOf(Tag{}),
		"feature-config":                       reflect.TypeOf(FeatureConfig{}),
		"telemetry-profile":                    reflect.TypeOf(TelemetryProfile{}),
		"bgp-router":                           reflect.TypeOf(BgpRouter{}),
		"virtual-network":                      reflect.TypeOf(VirtualNetwork{}),
		"virtual-port-group":                   reflect.TypeOf(VirtualPortGroup{}),
		"service-appliance":                    reflect.TypeOf(ServiceAppliance{}),
		"namespace":                            reflect.TypeOf(Namespace{}),
		"feature":                              reflect.TypeOf(Feature{}),
		"storm-control-profile":                reflect.TypeOf(StormControlProfile{}),
		"device-image":                         reflect.TypeOf(DeviceImage{}),
		"physical-interface":                   reflect.TypeOf(PhysicalInterface{}),
		"access-control-list":                  reflect.TypeOf(AccessControlList{}),
		"node":                                 reflect.TypeOf(Node{}),
		"customer-attachment":                  reflect.TypeOf(CustomerAttachment{}),
		"structured-syslog-sla-profile":        reflect.TypeOf(StructuredSyslogSlaProfile{}),
		"host-based-service":                   reflect.TypeOf(HostBasedService{}),
		"virtual-machine":                      reflect.TypeOf(VirtualMachine{}),
		"interface-route-table":                reflect.TypeOf(InterfaceRouteTable{}),
		"loadbalancer-member":                  reflect.TypeOf(LoadbalancerMember{}),
		"service-health-check":                 reflect.TypeOf(ServiceHealthCheck{}),
		"alarm":                                reflect.TypeOf(Alarm{}),
		"api-access-list":                      reflect.TypeOf(ApiAccessList{}),
		"routing-instance":                     reflect.TypeOf(RoutingInstance{}),
		"alias-ip-pool":                        reflect.TypeOf(AliasIpPool{}),
		"data-center-interconnect":             reflect.TypeOf(DataCenterInterconnect{}),
	}
)

func init() {
	contrail.RegisterTypeMap(TypeMap)
}
