// +build !ignore_autogenerated

// This file was autogenerated by openapi-gen. Do not edit it manually!

package v1alpha1

import (
	spec "github.com/go-openapi/spec"
	common "k8s.io/kube-openapi/pkg/common"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"./pkg/apis/contrail/v1alpha1.Cassandra":                    schema_pkg_apis_contrail_v1alpha1_Cassandra(ref),
		"./pkg/apis/contrail/v1alpha1.CassandraConfiguration":       schema_pkg_apis_contrail_v1alpha1_CassandraConfiguration(ref),
		"./pkg/apis/contrail/v1alpha1.CassandraSpec":                schema_pkg_apis_contrail_v1alpha1_CassandraSpec(ref),
		"./pkg/apis/contrail/v1alpha1.CassandraStatus":              schema_pkg_apis_contrail_v1alpha1_CassandraStatus(ref),
		"./pkg/apis/contrail/v1alpha1.CommonConfiguration":          schema_pkg_apis_contrail_v1alpha1_CommonConfiguration(ref),
		"./pkg/apis/contrail/v1alpha1.Config":                       schema_pkg_apis_contrail_v1alpha1_Config(ref),
		"./pkg/apis/contrail/v1alpha1.ConfigConfiguration":          schema_pkg_apis_contrail_v1alpha1_ConfigConfiguration(ref),
		"./pkg/apis/contrail/v1alpha1.ConfigSpec":                   schema_pkg_apis_contrail_v1alpha1_ConfigSpec(ref),
		"./pkg/apis/contrail/v1alpha1.ConfigStatus":                 schema_pkg_apis_contrail_v1alpha1_ConfigStatus(ref),
		"./pkg/apis/contrail/v1alpha1.ContrailCommand":              schema_pkg_apis_contrail_v1alpha1_ContrailCommand(ref),
		"./pkg/apis/contrail/v1alpha1.ContrailCommandConfiguration": schema_pkg_apis_contrail_v1alpha1_ContrailCommandConfiguration(ref),
		"./pkg/apis/contrail/v1alpha1.ContrailCommandSpec":          schema_pkg_apis_contrail_v1alpha1_ContrailCommandSpec(ref),
		"./pkg/apis/contrail/v1alpha1.ContrailCommandStatus":        schema_pkg_apis_contrail_v1alpha1_ContrailCommandStatus(ref),
		"./pkg/apis/contrail/v1alpha1.Control":                      schema_pkg_apis_contrail_v1alpha1_Control(ref),
		"./pkg/apis/contrail/v1alpha1.ControlConfiguration":         schema_pkg_apis_contrail_v1alpha1_ControlConfiguration(ref),
		"./pkg/apis/contrail/v1alpha1.ControlSpec":                  schema_pkg_apis_contrail_v1alpha1_ControlSpec(ref),
		"./pkg/apis/contrail/v1alpha1.ControlStatus":                schema_pkg_apis_contrail_v1alpha1_ControlStatus(ref),
		"./pkg/apis/contrail/v1alpha1.CrdStatus":                    schema_pkg_apis_contrail_v1alpha1_CrdStatus(ref),
		"./pkg/apis/contrail/v1alpha1.Keystone":                     schema_pkg_apis_contrail_v1alpha1_Keystone(ref),
		"./pkg/apis/contrail/v1alpha1.KeystoneConfiguration":        schema_pkg_apis_contrail_v1alpha1_KeystoneConfiguration(ref),
		"./pkg/apis/contrail/v1alpha1.KeystoneSpec":                 schema_pkg_apis_contrail_v1alpha1_KeystoneSpec(ref),
		"./pkg/apis/contrail/v1alpha1.KeystoneStatus":               schema_pkg_apis_contrail_v1alpha1_KeystoneStatus(ref),
		"./pkg/apis/contrail/v1alpha1.Kubemanager":                  schema_pkg_apis_contrail_v1alpha1_Kubemanager(ref),
		"./pkg/apis/contrail/v1alpha1.KubemanagerConfiguration":     schema_pkg_apis_contrail_v1alpha1_KubemanagerConfiguration(ref),
		"./pkg/apis/contrail/v1alpha1.KubemanagerSpec":              schema_pkg_apis_contrail_v1alpha1_KubemanagerSpec(ref),
		"./pkg/apis/contrail/v1alpha1.KubemanagerStatus":            schema_pkg_apis_contrail_v1alpha1_KubemanagerStatus(ref),
		"./pkg/apis/contrail/v1alpha1.Manager":                      schema_pkg_apis_contrail_v1alpha1_Manager(ref),
		"./pkg/apis/contrail/v1alpha1.ManagerSpec":                  schema_pkg_apis_contrail_v1alpha1_ManagerSpec(ref),
		"./pkg/apis/contrail/v1alpha1.ManagerStatus":                schema_pkg_apis_contrail_v1alpha1_ManagerStatus(ref),
		"./pkg/apis/contrail/v1alpha1.Postgres":                     schema_pkg_apis_contrail_v1alpha1_Postgres(ref),
		"./pkg/apis/contrail/v1alpha1.PostgresSpec":                 schema_pkg_apis_contrail_v1alpha1_PostgresSpec(ref),
		"./pkg/apis/contrail/v1alpha1.PostgresStatus":               schema_pkg_apis_contrail_v1alpha1_PostgresStatus(ref),
		"./pkg/apis/contrail/v1alpha1.Rabbitmq":                     schema_pkg_apis_contrail_v1alpha1_Rabbitmq(ref),
		"./pkg/apis/contrail/v1alpha1.RabbitmqConfiguration":        schema_pkg_apis_contrail_v1alpha1_RabbitmqConfiguration(ref),
		"./pkg/apis/contrail/v1alpha1.RabbitmqSpec":                 schema_pkg_apis_contrail_v1alpha1_RabbitmqSpec(ref),
		"./pkg/apis/contrail/v1alpha1.RabbitmqStatus":               schema_pkg_apis_contrail_v1alpha1_RabbitmqStatus(ref),
		"./pkg/apis/contrail/v1alpha1.ServiceStatus":                schema_pkg_apis_contrail_v1alpha1_ServiceStatus(ref),
		"./pkg/apis/contrail/v1alpha1.Services":                     schema_pkg_apis_contrail_v1alpha1_Services(ref),
		"./pkg/apis/contrail/v1alpha1.Status":                       schema_pkg_apis_contrail_v1alpha1_Status(ref),
		"./pkg/apis/contrail/v1alpha1.SwiftProxy":                   schema_pkg_apis_contrail_v1alpha1_SwiftProxy(ref),
		"./pkg/apis/contrail/v1alpha1.SwiftProxyConfiguration":      schema_pkg_apis_contrail_v1alpha1_SwiftProxyConfiguration(ref),
		"./pkg/apis/contrail/v1alpha1.SwiftProxySpec":               schema_pkg_apis_contrail_v1alpha1_SwiftProxySpec(ref),
		"./pkg/apis/contrail/v1alpha1.SwiftProxyStatus":             schema_pkg_apis_contrail_v1alpha1_SwiftProxyStatus(ref),
		"./pkg/apis/contrail/v1alpha1.SwiftStorage":                 schema_pkg_apis_contrail_v1alpha1_SwiftStorage(ref),
		"./pkg/apis/contrail/v1alpha1.SwiftStorageSpec":             schema_pkg_apis_contrail_v1alpha1_SwiftStorageSpec(ref),
		"./pkg/apis/contrail/v1alpha1.SwiftStorageStatus":           schema_pkg_apis_contrail_v1alpha1_SwiftStorageStatus(ref),
		"./pkg/apis/contrail/v1alpha1.Vrouter":                      schema_pkg_apis_contrail_v1alpha1_Vrouter(ref),
		"./pkg/apis/contrail/v1alpha1.VrouterConfiguration":         schema_pkg_apis_contrail_v1alpha1_VrouterConfiguration(ref),
		"./pkg/apis/contrail/v1alpha1.VrouterSpec":                  schema_pkg_apis_contrail_v1alpha1_VrouterSpec(ref),
		"./pkg/apis/contrail/v1alpha1.VrouterStatus":                schema_pkg_apis_contrail_v1alpha1_VrouterStatus(ref),
		"./pkg/apis/contrail/v1alpha1.Webui":                        schema_pkg_apis_contrail_v1alpha1_Webui(ref),
		"./pkg/apis/contrail/v1alpha1.WebuiConfiguration":           schema_pkg_apis_contrail_v1alpha1_WebuiConfiguration(ref),
		"./pkg/apis/contrail/v1alpha1.WebuiSpec":                    schema_pkg_apis_contrail_v1alpha1_WebuiSpec(ref),
		"./pkg/apis/contrail/v1alpha1.WebuiStatus":                  schema_pkg_apis_contrail_v1alpha1_WebuiStatus(ref),
		"./pkg/apis/contrail/v1alpha1.Zookeeper":                    schema_pkg_apis_contrail_v1alpha1_Zookeeper(ref),
		"./pkg/apis/contrail/v1alpha1.ZookeeperConfiguration":       schema_pkg_apis_contrail_v1alpha1_ZookeeperConfiguration(ref),
		"./pkg/apis/contrail/v1alpha1.ZookeeperSpec":                schema_pkg_apis_contrail_v1alpha1_ZookeeperSpec(ref),
		"./pkg/apis/contrail/v1alpha1.ZookeeperStatus":              schema_pkg_apis_contrail_v1alpha1_ZookeeperStatus(ref),
	}
}

func schema_pkg_apis_contrail_v1alpha1_Cassandra(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Cassandra is the Schema for the cassandras API.",
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/contrail/v1alpha1.CassandraSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/contrail/v1alpha1.CassandraStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./pkg/apis/contrail/v1alpha1.CassandraSpec", "./pkg/apis/contrail/v1alpha1.CassandraStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_contrail_v1alpha1_CassandraConfiguration(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "CassandraConfiguration is the Spec for the cassandras API.",
				Properties: map[string]spec.Schema{
					"images": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"clusterName": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"listenAddress": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"port": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
					"cqlPort": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
					"sslStoragePort": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
					"storagePort": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
					"jmxLocalPort": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
					"maxHeapSize": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"minHeapSize": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"startRPC": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"storageSize": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"storagePath": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"images"},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_contrail_v1alpha1_CassandraSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "CassandraSpec is the Spec for the cassandras API.",
				Properties: map[string]spec.Schema{
					"commonConfiguration": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/contrail/v1alpha1.CommonConfiguration"),
						},
					},
					"serviceConfiguration": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/contrail/v1alpha1.CassandraConfiguration"),
						},
					},
				},
				Required: []string{"commonConfiguration", "serviceConfiguration"},
			},
		},
		Dependencies: []string{
			"./pkg/apis/contrail/v1alpha1.CassandraConfiguration", "./pkg/apis/contrail/v1alpha1.CommonConfiguration"},
	}
}

func schema_pkg_apis_contrail_v1alpha1_CassandraStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "CassandraStatus defines the status of the cassandra object.",
				Properties: map[string]spec.Schema{
					"active": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"nodes": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"ports": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/contrail/v1alpha1.CassandraStatusPorts"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./pkg/apis/contrail/v1alpha1.CassandraStatusPorts"},
	}
}

func schema_pkg_apis_contrail_v1alpha1_CommonConfiguration(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "CommonConfiguration is the common services struct.",
				Properties: map[string]spec.Schema{
					"activate": {
						SchemaProps: spec.SchemaProps{
							Description: "Activate defines if the service will be activated by Manager.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"create": {
						SchemaProps: spec.SchemaProps{
							Description: "Create defines if the service will be created by Manager.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"nodeSelector": {
						SchemaProps: spec.SchemaProps{
							Description: "NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"hostNetwork": {
						SchemaProps: spec.SchemaProps{
							Description: "Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"imagePullSecrets": {
						SchemaProps: spec.SchemaProps{
							Description: "ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"tolerations": {
						SchemaProps: spec.SchemaProps{
							Description: "If specified, the pod's tolerations.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/api/core/v1.Toleration"),
									},
								},
							},
						},
					},
					"replicas": {
						SchemaProps: spec.SchemaProps{
							Description: "Number of desired pods. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.Toleration"},
	}
}

func schema_pkg_apis_contrail_v1alpha1_Config(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Config is the Schema for the configs API.",
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/contrail/v1alpha1.ConfigSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/contrail/v1alpha1.ConfigStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./pkg/apis/contrail/v1alpha1.ConfigSpec", "./pkg/apis/contrail/v1alpha1.ConfigStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_contrail_v1alpha1_ConfigConfiguration(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ConfigConfiguration is the Spec for the cassandras API.",
				Properties: map[string]spec.Schema{
					"images": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"apiPort": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
					"analyticsPort": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
					"collectorPort": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
					"redisPort": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
					"cassandraInstance": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"zookeeperInstance": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"nodeManager": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
				},
				Required: []string{"images"},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_contrail_v1alpha1_ConfigSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ConfigSpec is the Spec for the cassandras API.",
				Properties: map[string]spec.Schema{
					"commonConfiguration": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/contrail/v1alpha1.CommonConfiguration"),
						},
					},
					"serviceConfiguration": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/contrail/v1alpha1.ConfigConfiguration"),
						},
					},
				},
				Required: []string{"commonConfiguration", "serviceConfiguration"},
			},
		},
		Dependencies: []string{
			"./pkg/apis/contrail/v1alpha1.CommonConfiguration", "./pkg/apis/contrail/v1alpha1.ConfigConfiguration"},
	}
}

func schema_pkg_apis_contrail_v1alpha1_ConfigStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Properties: map[string]spec.Schema{
					"active": {
						SchemaProps: spec.SchemaProps{
							Description: "INSERT ADDITIONAL STATUS FIELD - define observed state of cluster Important: Run \"operator-sdk generate k8s\" to regenerate code after modifying this file Add custom validation using kubebuilder tags: https://book.kubebuilder.io/beyond_basics/generating_crd.html",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"nodes": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"ports": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/contrail/v1alpha1.ConfigStatusPorts"),
						},
					},
					"configChanged": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./pkg/apis/contrail/v1alpha1.ConfigStatusPorts"},
	}
}

func schema_pkg_apis_contrail_v1alpha1_ContrailCommand(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ContrailCommand is the Schema for the contrailcommands API",
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/contrail/v1alpha1.ContrailCommandSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/contrail/v1alpha1.ContrailCommandStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./pkg/apis/contrail/v1alpha1.ContrailCommandSpec", "./pkg/apis/contrail/v1alpha1.ContrailCommandStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_contrail_v1alpha1_ContrailCommandConfiguration(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ContrailCommandConfiguration is the Spec for the ContrailCommand configuration",
				Properties: map[string]spec.Schema{
					"postgresInstance": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"adminUsername": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"adminPassword": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_contrail_v1alpha1_ContrailCommandSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ContrailCommandSpec defines the desired state of ContrailCommand",
				Properties: map[string]spec.Schema{
					"commonConfiguration": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/contrail/v1alpha1.CommonConfiguration"),
						},
					},
					"serviceConfiguration": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/contrail/v1alpha1.ContrailCommandConfiguration"),
						},
					},
				},
				Required: []string{"commonConfiguration", "serviceConfiguration"},
			},
		},
		Dependencies: []string{
			"./pkg/apis/contrail/v1alpha1.CommonConfiguration", "./pkg/apis/contrail/v1alpha1.ContrailCommandConfiguration"},
	}
}

func schema_pkg_apis_contrail_v1alpha1_ContrailCommandStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ContrailCommandStatus defines the observed state of ContrailCommand",
				Properties: map[string]spec.Schema{
					"active": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_contrail_v1alpha1_Control(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Control is the Schema for the controls API.",
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/contrail/v1alpha1.ControlSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/contrail/v1alpha1.ControlStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./pkg/apis/contrail/v1alpha1.ControlSpec", "./pkg/apis/contrail/v1alpha1.ControlStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_contrail_v1alpha1_ControlConfiguration(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ControlConfiguration is the Spec for the controls API.",
				Properties: map[string]spec.Schema{
					"images": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"cassandraInstance": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"zookeeperInstance": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"bgpPort": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
					"asnNumber": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
					"xmppPort": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
					"dnsPort": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
					"dnsIntrospectPort": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
					"nodeManager": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
				},
				Required: []string{"images"},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_contrail_v1alpha1_ControlSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ControlSpec is the Spec for the controls API.",
				Properties: map[string]spec.Schema{
					"commonConfiguration": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/contrail/v1alpha1.CommonConfiguration"),
						},
					},
					"serviceConfiguration": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/contrail/v1alpha1.ControlConfiguration"),
						},
					},
				},
				Required: []string{"commonConfiguration", "serviceConfiguration"},
			},
		},
		Dependencies: []string{
			"./pkg/apis/contrail/v1alpha1.CommonConfiguration", "./pkg/apis/contrail/v1alpha1.ControlConfiguration"},
	}
}

func schema_pkg_apis_contrail_v1alpha1_ControlStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Properties: map[string]spec.Schema{
					"active": {
						SchemaProps: spec.SchemaProps{
							Description: "INSERT ADDITIONAL STATUS FIELD - define observed state of cluster Important: Run \"operator-sdk generate k8s\" to regenerate code after modifying this file Add custom validation using kubebuilder tags: https://book.kubebuilder.io/beyond_basics/generating_crd.html",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"nodes": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"ports": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/contrail/v1alpha1.ControlStatusPorts"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./pkg/apis/contrail/v1alpha1.ControlStatusPorts"},
	}
}

func schema_pkg_apis_contrail_v1alpha1_CrdStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "CrdStatus tracks status of CRD.",
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"active": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_contrail_v1alpha1_Keystone(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Keystone is the Schema for the keystones API",
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/contrail/v1alpha1.KeystoneSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/contrail/v1alpha1.KeystoneStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./pkg/apis/contrail/v1alpha1.KeystoneSpec", "./pkg/apis/contrail/v1alpha1.KeystoneStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_contrail_v1alpha1_KeystoneConfiguration(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "KeystoneConfiguration is the Spec for the keystone API.",
				Properties: map[string]spec.Schema{
					"listenPort": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
					"postgresInstance": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_contrail_v1alpha1_KeystoneSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "KeystoneSpec defines the desired state of Keystone",
				Properties: map[string]spec.Schema{
					"commonConfiguration": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/contrail/v1alpha1.CommonConfiguration"),
						},
					},
					"serviceConfiguration": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/contrail/v1alpha1.KeystoneConfiguration"),
						},
					},
				},
				Required: []string{"commonConfiguration", "serviceConfiguration"},
			},
		},
		Dependencies: []string{
			"./pkg/apis/contrail/v1alpha1.CommonConfiguration", "./pkg/apis/contrail/v1alpha1.KeystoneConfiguration"},
	}
}

func schema_pkg_apis_contrail_v1alpha1_KeystoneStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "KeystoneStatus defines the observed state of Keystone",
				Properties: map[string]spec.Schema{
					"active": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"node": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_contrail_v1alpha1_Kubemanager(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Kubemanager is the Schema for the kubemanagers API.",
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/contrail/v1alpha1.KubemanagerSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/contrail/v1alpha1.KubemanagerStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./pkg/apis/contrail/v1alpha1.KubemanagerSpec", "./pkg/apis/contrail/v1alpha1.KubemanagerStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_contrail_v1alpha1_KubemanagerConfiguration(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "KubemanagerConfiguration is the Spec for the kubemanagers API.",
				Properties: map[string]spec.Schema{
					"images": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"cassandraInstance": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"zookeeperInstance": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"useKubeadmConfig": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"serviceAccount": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"clusterRole": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"clusterRoleBinding": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"cloudOrchestrator": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"kubernetesAPIServer": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"kubernetesAPIPort": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
					"kubernetesAPISSLPort": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
					"podSubnets": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"serviceSubnets": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"kubernetesClusterName": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"ipFabricSubnets": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"ipFabricForwarding": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"ipFabricSnat": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"kubernetesTokenFile": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"hostNetworkService": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
				},
				Required: []string{"images"},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_contrail_v1alpha1_KubemanagerSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "KubemanagerSpec is the Spec for the kubemanagers API.",
				Properties: map[string]spec.Schema{
					"commonConfiguration": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/contrail/v1alpha1.CommonConfiguration"),
						},
					},
					"serviceConfiguration": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/contrail/v1alpha1.KubemanagerConfiguration"),
						},
					},
				},
				Required: []string{"commonConfiguration", "serviceConfiguration"},
			},
		},
		Dependencies: []string{
			"./pkg/apis/contrail/v1alpha1.CommonConfiguration", "./pkg/apis/contrail/v1alpha1.KubemanagerConfiguration"},
	}
}

func schema_pkg_apis_contrail_v1alpha1_KubemanagerStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Properties: map[string]spec.Schema{
					"active": {
						SchemaProps: spec.SchemaProps{
							Description: "INSERT ADDITIONAL STATUS FIELD - define observed state of cluster Important: Run \"operator-sdk generate k8s\" to regenerate code after modifying this file Add custom validation using kubebuilder tags: https://book.kubebuilder.io/beyond_basics/generating_crd.html",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"nodes": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"configChanged": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_contrail_v1alpha1_Manager(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Manager is the Schema for the managers API.",
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/contrail/v1alpha1.ManagerSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/contrail/v1alpha1.ManagerStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./pkg/apis/contrail/v1alpha1.ManagerSpec", "./pkg/apis/contrail/v1alpha1.ManagerStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_contrail_v1alpha1_ManagerSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ManagerSpec defines the desired state of Manager.",
				Properties: map[string]spec.Schema{
					"commonConfiguration": {
						SchemaProps: spec.SchemaProps{
							Description: "INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run \"operator-sdk generate k8s\" to regenerate code after modifying this file Add custom validation using kubebuilder tags: https://book.kubebuilder.io/beyond_basics/generating_crd.html",
							Ref:         ref("./pkg/apis/contrail/v1alpha1.CommonConfiguration"),
						},
					},
					"services": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/contrail/v1alpha1.Services"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./pkg/apis/contrail/v1alpha1.CommonConfiguration", "./pkg/apis/contrail/v1alpha1.Services"},
	}
}

func schema_pkg_apis_contrail_v1alpha1_ManagerStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ManagerStatus defines the observed state of Manager.",
				Properties: map[string]spec.Schema{
					"config": {
						SchemaProps: spec.SchemaProps{
							Description: "INSERT ADDITIONAL STATUS FIELD - define observed state of cluster Important: Run \"operator-sdk generate k8s\" to regenerate code after modifying this file Add custom validation using kubebuilder tags: https://book.kubebuilder.io/beyond_basics/generating_crd.html",
							Ref:         ref("./pkg/apis/contrail/v1alpha1.ServiceStatus"),
						},
					},
					"controls": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("./pkg/apis/contrail/v1alpha1.ServiceStatus"),
									},
								},
							},
						},
					},
					"kubemanagers": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("./pkg/apis/contrail/v1alpha1.ServiceStatus"),
									},
								},
							},
						},
					},
					"webui": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/contrail/v1alpha1.ServiceStatus"),
						},
					},
					"vrouters": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("./pkg/apis/contrail/v1alpha1.ServiceStatus"),
									},
								},
							},
						},
					},
					"cassandras": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("./pkg/apis/contrail/v1alpha1.ServiceStatus"),
									},
								},
							},
						},
					},
					"zookeepers": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("./pkg/apis/contrail/v1alpha1.ServiceStatus"),
									},
								},
							},
						},
					},
					"rabbitmq": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/contrail/v1alpha1.ServiceStatus"),
						},
					},
					"crdStatus": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("./pkg/apis/contrail/v1alpha1.CrdStatus"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./pkg/apis/contrail/v1alpha1.CrdStatus", "./pkg/apis/contrail/v1alpha1.ServiceStatus"},
	}
}

func schema_pkg_apis_contrail_v1alpha1_Postgres(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Postgres is the Schema for the postgres API",
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/contrail/v1alpha1.PostgresSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/contrail/v1alpha1.PostgresStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./pkg/apis/contrail/v1alpha1.PostgresSpec", "./pkg/apis/contrail/v1alpha1.PostgresStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_contrail_v1alpha1_PostgresSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PostgresSpec defines the desired state of Postgres",
				Properties:  map[string]spec.Schema{},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_contrail_v1alpha1_PostgresStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PostgresStatus defines the observed state of Postgres",
				Properties: map[string]spec.Schema{
					"active": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"node": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_contrail_v1alpha1_Rabbitmq(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Rabbitmq is the Schema for the rabbitmqs API.",
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/contrail/v1alpha1.RabbitmqSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/contrail/v1alpha1.RabbitmqStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./pkg/apis/contrail/v1alpha1.RabbitmqSpec", "./pkg/apis/contrail/v1alpha1.RabbitmqStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_contrail_v1alpha1_RabbitmqConfiguration(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "RabbitmqConfiguration is the Spec for the cassandras API.",
				Properties: map[string]spec.Schema{
					"images": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"port": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
					"erlangCookie": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"images"},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_contrail_v1alpha1_RabbitmqSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "RabbitmqSpec is the Spec for the cassandras API.",
				Properties: map[string]spec.Schema{
					"commonConfiguration": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/contrail/v1alpha1.CommonConfiguration"),
						},
					},
					"serviceConfiguration": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/contrail/v1alpha1.RabbitmqConfiguration"),
						},
					},
				},
				Required: []string{"commonConfiguration", "serviceConfiguration"},
			},
		},
		Dependencies: []string{
			"./pkg/apis/contrail/v1alpha1.CommonConfiguration", "./pkg/apis/contrail/v1alpha1.RabbitmqConfiguration"},
	}
}

func schema_pkg_apis_contrail_v1alpha1_RabbitmqStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Properties: map[string]spec.Schema{
					"active": {
						SchemaProps: spec.SchemaProps{
							Description: "INSERT ADDITIONAL STATUS FIELD - define observed state of cluster Important: Run \"operator-sdk generate k8s\" to regenerate code after modifying this file Add custom validation using kubebuilder tags: https://book.kubebuilder.io/beyond_basics/generating_crd.html",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"nodes": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"ports": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/contrail/v1alpha1.RabbitmqStatusPorts"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./pkg/apis/contrail/v1alpha1.RabbitmqStatusPorts"},
	}
}

func schema_pkg_apis_contrail_v1alpha1_ServiceStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ServiceStatus provides information on the current status of the service.",
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"active": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"created": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"controllerRunning": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_contrail_v1alpha1_Services(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Services defines the desired state of Services.",
				Properties: map[string]spec.Schema{
					"config": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/contrail/v1alpha1.Config"),
						},
					},
					"controls": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("./pkg/apis/contrail/v1alpha1.Control"),
									},
								},
							},
						},
					},
					"kubemanagers": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("./pkg/apis/contrail/v1alpha1.Kubemanager"),
									},
								},
							},
						},
					},
					"webui": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/contrail/v1alpha1.Webui"),
						},
					},
					"vrouters": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("./pkg/apis/contrail/v1alpha1.Vrouter"),
									},
								},
							},
						},
					},
					"cassandras": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("./pkg/apis/contrail/v1alpha1.Cassandra"),
									},
								},
							},
						},
					},
					"zookeepers": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("./pkg/apis/contrail/v1alpha1.Zookeeper"),
									},
								},
							},
						},
					},
					"rabbitmq": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/contrail/v1alpha1.Rabbitmq"),
						},
					},
					"contrailCommand": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/contrail/v1alpha1.ContrailCommand"),
						},
					},
					"postgres": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/contrail/v1alpha1.Postgres"),
						},
					},
					"keystone": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/contrail/v1alpha1.Keystone"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./pkg/apis/contrail/v1alpha1.Cassandra", "./pkg/apis/contrail/v1alpha1.Config", "./pkg/apis/contrail/v1alpha1.ContrailCommand", "./pkg/apis/contrail/v1alpha1.Control", "./pkg/apis/contrail/v1alpha1.Keystone", "./pkg/apis/contrail/v1alpha1.Kubemanager", "./pkg/apis/contrail/v1alpha1.Postgres", "./pkg/apis/contrail/v1alpha1.Rabbitmq", "./pkg/apis/contrail/v1alpha1.Vrouter", "./pkg/apis/contrail/v1alpha1.Webui", "./pkg/apis/contrail/v1alpha1.Zookeeper"},
	}
}

func schema_pkg_apis_contrail_v1alpha1_Status(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Status is the status of the service.",
				Properties: map[string]spec.Schema{
					"active": {
						SchemaProps: spec.SchemaProps{
							Description: "INSERT ADDITIONAL STATUS FIELD - define observed state of cluster. Important: Run \"operator-sdk generate k8s\" to regenerate code after modifying this file. Add custom validation using kubebuilder tags: https://book.kubebuilder.io/beyond_basics/generating_crd.html.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"nodes": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"ports": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_contrail_v1alpha1_SwiftProxy(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SwiftProxy is the Schema for the swiftproxies API",
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/contrail/v1alpha1.SwiftProxySpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/contrail/v1alpha1.SwiftProxyStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./pkg/apis/contrail/v1alpha1.SwiftProxySpec", "./pkg/apis/contrail/v1alpha1.SwiftProxyStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_contrail_v1alpha1_SwiftProxyConfiguration(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SwiftProxyConfiguration is the Spec for the keystone API.",
				Properties: map[string]spec.Schema{
					"listenPort": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
					"keystoneInstance": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"keystoneAdminPassword": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"swiftPassword": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_contrail_v1alpha1_SwiftProxySpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SwiftProxySpec defines the desired state of SwiftProxy",
				Properties: map[string]spec.Schema{
					"serviceConfiguration": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/contrail/v1alpha1.SwiftProxyConfiguration"),
						},
					},
				},
				Required: []string{"serviceConfiguration"},
			},
		},
		Dependencies: []string{
			"./pkg/apis/contrail/v1alpha1.SwiftProxyConfiguration"},
	}
}

func schema_pkg_apis_contrail_v1alpha1_SwiftProxyStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SwiftProxyStatus defines the observed state of SwiftProxy",
				Properties: map[string]spec.Schema{
					"active": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
				},
				Required: []string{"active"},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_contrail_v1alpha1_SwiftStorage(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SwiftStorage is the Schema for the swiftstorages API",
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/contrail/v1alpha1.SwiftStorageSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/contrail/v1alpha1.SwiftStorageStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./pkg/apis/contrail/v1alpha1.SwiftStorageSpec", "./pkg/apis/contrail/v1alpha1.SwiftStorageStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_contrail_v1alpha1_SwiftStorageSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SwiftStorageSpec defines the desired state of SwiftStorage",
				Properties:  map[string]spec.Schema{},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_contrail_v1alpha1_SwiftStorageStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SwiftStorageStatus defines the observed state of SwiftStorage",
				Properties: map[string]spec.Schema{
					"active": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
				},
				Required: []string{"active"},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_contrail_v1alpha1_Vrouter(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Vrouter is the Schema for the vrouters API.",
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/contrail/v1alpha1.VrouterSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/contrail/v1alpha1.VrouterStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./pkg/apis/contrail/v1alpha1.VrouterSpec", "./pkg/apis/contrail/v1alpha1.VrouterStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_contrail_v1alpha1_VrouterConfiguration(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "VrouterConfiguration is the Spec for the cassandras API.",
				Properties: map[string]spec.Schema{
					"images": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"controlInstance": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"cassandraInstance": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"gateway": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"physicalInterface": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"metaDataSecret": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"nodeManager": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"distribution": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"serviceAccount": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"clusterRole": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"clusterRoleBinding": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"images"},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_contrail_v1alpha1_VrouterSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "VrouterSpec is the Spec for the cassandras API.",
				Properties: map[string]spec.Schema{
					"commonConfiguration": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/contrail/v1alpha1.CommonConfiguration"),
						},
					},
					"serviceConfiguration": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/contrail/v1alpha1.VrouterConfiguration"),
						},
					},
				},
				Required: []string{"commonConfiguration", "serviceConfiguration"},
			},
		},
		Dependencies: []string{
			"./pkg/apis/contrail/v1alpha1.CommonConfiguration", "./pkg/apis/contrail/v1alpha1.VrouterConfiguration"},
	}
}

func schema_pkg_apis_contrail_v1alpha1_VrouterStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Properties: map[string]spec.Schema{
					"ports": {
						SchemaProps: spec.SchemaProps{
							Description: "INSERT ADDITIONAL STATUS FIELD - define observed state of cluster Important: Run \"operator-sdk generate k8s\" to regenerate code after modifying this file Add custom validation using kubebuilder tags: https://book.kubebuilder.io/beyond_basics/generating_crd.html",
							Ref:         ref("./pkg/apis/contrail/v1alpha1.ConfigStatusPorts"),
						},
					},
					"nodes": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./pkg/apis/contrail/v1alpha1.ConfigStatusPorts"},
	}
}

func schema_pkg_apis_contrail_v1alpha1_Webui(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Webui is the Schema for the webuis API.",
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/contrail/v1alpha1.WebuiSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/contrail/v1alpha1.WebuiStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./pkg/apis/contrail/v1alpha1.WebuiSpec", "./pkg/apis/contrail/v1alpha1.WebuiStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_contrail_v1alpha1_WebuiConfiguration(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "WebuiConfiguration is the Spec for the cassandras API.",
				Properties: map[string]spec.Schema{
					"images": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"cassandraInstance": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"serviceAccount": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"clusterRole": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"clusterRoleBinding": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"adminUsername": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"adminPassword": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"images"},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_contrail_v1alpha1_WebuiSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "WebuiSpec is the Spec for the cassandras API.",
				Properties: map[string]spec.Schema{
					"commonConfiguration": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/contrail/v1alpha1.CommonConfiguration"),
						},
					},
					"serviceConfiguration": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/contrail/v1alpha1.WebuiConfiguration"),
						},
					},
				},
				Required: []string{"commonConfiguration", "serviceConfiguration"},
			},
		},
		Dependencies: []string{
			"./pkg/apis/contrail/v1alpha1.CommonConfiguration", "./pkg/apis/contrail/v1alpha1.WebuiConfiguration"},
	}
}

func schema_pkg_apis_contrail_v1alpha1_WebuiStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Properties: map[string]spec.Schema{
					"active": {
						SchemaProps: spec.SchemaProps{
							Description: "INSERT ADDITIONAL STATUS FIELD - define observed state of cluster Important: Run \"operator-sdk generate k8s\" to regenerate code after modifying this file Add custom validation using kubebuilder tags: https://book.kubebuilder.io/beyond_basics/generating_crd.html",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"nodes": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_contrail_v1alpha1_Zookeeper(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Zookeeper is the Schema for the zookeepers API.",
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/contrail/v1alpha1.ZookeeperSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/contrail/v1alpha1.ZookeeperStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./pkg/apis/contrail/v1alpha1.ZookeeperSpec", "./pkg/apis/contrail/v1alpha1.ZookeeperStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_contrail_v1alpha1_ZookeeperConfiguration(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ZookeeperConfiguration is the Spec for the zookeepers API.",
				Properties: map[string]spec.Schema{
					"images": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"clientPort": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
					"electionPort": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
					"serverPort": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
				},
				Required: []string{"images"},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_contrail_v1alpha1_ZookeeperSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ZookeeperSpec is the Spec for the zookeepers API.",
				Properties: map[string]spec.Schema{
					"commonConfiguration": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/contrail/v1alpha1.CommonConfiguration"),
						},
					},
					"serviceConfiguration": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/contrail/v1alpha1.ZookeeperConfiguration"),
						},
					},
				},
				Required: []string{"commonConfiguration", "serviceConfiguration"},
			},
		},
		Dependencies: []string{
			"./pkg/apis/contrail/v1alpha1.CommonConfiguration", "./pkg/apis/contrail/v1alpha1.ZookeeperConfiguration"},
	}
}

func schema_pkg_apis_contrail_v1alpha1_ZookeeperStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ZookeeperStatus defines the status of the zookeeper object.",
				Properties: map[string]spec.Schema{
					"active": {
						SchemaProps: spec.SchemaProps{
							Description: "INSERT ADDITIONAL STATUS FIELD - define observed state of cluster Important: Run \"operator-sdk generate k8s\" to regenerate code after modifying this file Add custom validation using kubebuilder tags: https://book.kubebuilder.io/beyond_basics/generating_crd.html",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"nodes": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"ports": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/contrail/v1alpha1.ZookeeperStatusPorts"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./pkg/apis/contrail/v1alpha1.ZookeeperStatusPorts"},
	}
}
